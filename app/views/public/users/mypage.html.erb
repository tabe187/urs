<head>
  <%= include_gon %>
</head>

<body>
    <div class="container">
      <div class="row justify-content-center">
        <strong>お気に入りのお店や場所を検索しお気に入りに追加しよう</strong>
      </div>
      <div class="row">
            <div class="col-xl-9" >
              <div class="row justify-content-center">
                <div class="col-xl-3 border rounded " style="padding:10px; margin:10px;" >
                  <h8><i class="fas fa-utensils"></i> Restaurant</h8><br>
                    <% @maps.each do |map| %>
                      <div onClick="getFavoriteAddresss(<%= map.latitude %>, <%= map.longitude %>, <%= map.id %>,'<%= map.place_name %>')" >
                      <% if map.types == "restaurant" %>
                        <%= link_to map.place_name, "#map" %><br>
                        (<%= map.address.match(/^.{2,3}[市区町村]/).to_s %>)
                        <i class="fab fa-gratipay"></i> <%= map.favorites.count %><br>
                      <% end %>
                      </div>
                    <% end %>
                </div>
                <div class="col-xl-3 border rounded " style="padding:10px; margin:10px;" >
                  <h8><i class="fas fa-cocktail"></i> Bar</h8><br>
                    <% @maps.each do |map| %>
                      <div onClick="getFavoriteAddresss(<%= map.latitude %>, <%= map.longitude %>, <%= map.id %>,'<%= map.place_name %>')" >
                      <% if map.types == "night_club" || map.types == "bar" %>
                        <%= link_to map.place_name, "#map" %><br>
                        (<%= map.address.match(/^.{2,3}[市区町村]/).to_s %>)
                        <i class="fab fa-gratipay"></i> <%= map.favorites.count %><br>
                      <% end %>
                      </div>
                    <% end %>
                </div>
                <div class="col-xl-3 border rounded " style="padding:10px; margin:10px;" >
                  <h8><i class="fab fa-fly"></i> Park</h8><br>
                    <% @maps.each do |map| %>
                      <div onClick="getFavoriteAddresss(<%= map.latitude %>, <%= map.longitude %>, <%= map.id %>,'<%= map.place_name %>')" >
                      <% if map.types == "park" %>
                        <%= link_to map.place_name, "#map" %><br>
                        (<%= map.address.match(/^.{2,3}[市区町村]/).to_s %>)
                        <i class="fab fa-gratipay"></i> <%= map.favorites.count %><br>
                      <% end %>
                      </div>
                    <% end %>
                 </div>
              </div>
                <div class="justify-content-center text-center">
                  <input id="address" type="textbox" placeholder="例:溝の口下作延">
                  <input type="button" value="周辺地域を検索する" onclick="codeAddress()">
                </div>
              <div class="row justify-content-center">
                <div class="col-xl-9 border rounded" >
                     <div id="map" style="width:100%;height:600px; " ></div>
                </div>
              </div>
            </div>
          <div class="col-xl-3 "style="padding: 10px" >
                  <table>
                    <tr>
                      <td>
                        検索場所：<input type="text" id="addressInput" placeholder="例:渋谷区宇田川町" style="width: 150px">
                      </td>
                    </tr>
                    <tr>
                      <td>
                        キーワード：<input type="text" id="keywordInput" placeholder="寿司" style="width: 150px">
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <div style="padding: 10px">
                          <input type="button" value="検索" onclick="getPlaces();">
                        </div>
                      </td>
                    </tr>
                  </table>

                  <strong>検索結果</strong></br>
                    <div id="results" style="width: 100%; height: 600px; border: 1px dotted; padding: 10px; overflow-y: scroll; background: white;"></div>
                </div>
      </div>
    <div class="row justify-content-center">
      <strong>フォローユーザーのお気に入り一覧</strong>
    </div>

    <div class="row justify-content-center">
      <div class="col-xl-10">
        <table class="table table-hover table-inverse">
          <thead>
            <tr>
              <th><%= sort_link(@maps_q, :place_name, "店名") %></th>
              <th><%= sort_link(@maps_q, :address, "市区町村") %></th>
              <th><%= sort_link(@maps_q, :rating, "評価") %></th>
              <th><%= sort_link(@maps_q, :favorites_count, "お気に入り") %></th>
              <th><%= sort_link(@maps_q, :reviews_count, "レビュー") %></th>
              <th><%= sort_link(@maps_q, :types, "ジャンル") %></th>
              <th><%= sort_link(@maps_q, :updated_at, "更新日") %></th>
            </tr>
          </thead>
          <tbody>
            <% @maps_list.each do |favorite| %>
            <tr>
              <td><%= link_to map_path(favorite.id) do %>
                  <%= favorite.place_name %>
                  <% end %>
              </td>
              <td><%= favorite.address.match(/^.{2,3}[市区町村]/).to_s %></td>
              <td><%= favorite.rating %></td>
              <td><%= favorite.favorites_count %></td>
              <td><%= favorite.reviews_count %></td>
              <td><%= favorite.types_i18n %></td>
              <td><%= favorite.favorites.last.updated_at.strftime('%Y/%m/%d') %></td>
            <% end %>
            </tr>
          </tbody>
        </table>
        <div class="row justify-content-center">
        <%= paginate @maps_list %>
        </div>
      </div>
    </div>

<script>

let map
let geocoder
//　1.現在地の緯度経度を取得する
//　2.取得した緯度経度情報をもとに赤いぴんを地図に表示する
//　3.取得した住所(緯度経度?)をDB
// function initMap(){
//   let map = new google.maps.Map(document.getElementById('map'), {
//   center: {lat: 35.658, lng: 139.701},
//   zoom: 15
//   });
// }

function initMap(){
  let marker = [];
  let infoWindow = [];
  let latlng;
  const maps = gon.maps;
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 35.599, lng: 139.610},
    zoom: 15
  });

  for (let i = 0; i < maps.length; i++) {
    latlng = new google.maps.LatLng(maps[i].latitude, maps[i].longitude);
    marker[i] = new google.maps.Marker({
            map: map,
            position: latlng,
      });

      infoWindow[i] = new google.maps.InfoWindow({
                // contentで中身を指定
                // 今回は文字にリンクを貼り付けた形で表示
                content: `<a href='/maps/${maps[i].id}'>${maps[i].place_name}</a>`
                });
                // markerがクリックされた時、
                marker[i].addListener("click", function(){
                    // infoWindowを表示
                    infoWindow[i].open(map, marker[i]);
                });
    }
}

/*
 お店情報取得
*/
function getPlaces(){

  //結果表示クリア
  document.getElementById("results").innerHTML = "";
  //placesList配列を初期化
  placesList = new Array();

  //入力した検索場所を取得
  var addressInput = document.getElementById("addressInput").value;
  if (addressInput == "") {
    return;
  }

  //検索場所の位置情報を取得
  var geocoder = new google.maps.Geocoder();
  geocoder.geocode(
    {
      address: addressInput
    },
    function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        //取得した緯度・経度を使って周辺検索
        startNearbySearch(results[0].geometry.location);
      }
      else {
        alert(addressInput + "：位置情報が取得できませんでした。");
      }
    });
}

/*
 位置情報を使って周辺検索
  latLng : 位置座標インスタンス（google.maps.LatLng）
*/
function startNearbySearch(latLng){

  //読み込み中表示
  document.getElementById("results").innerHTML = "Now Loading...";

  //Mapインスタンス生成
  var map = new google.maps.Map(
    document.getElementById("map"),
    {
      zoom: 15,
      center: latLng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
  );

  //PlacesServiceインスタンス生成
  var service = new google.maps.places.PlacesService(map);

  //入力したKeywordを取得
  var keywordInput = document.getElementById("keywordInput").value;
  //入力した検索範囲を取得
  // var obj = document.getElementById("radiusInput");
  // var radiusInput = Number(obj.options[obj.selectedIndex].value);

  //周辺検索
  service.nearbySearch(
    {
      location: latLng,
      radius: '2000',
      type: ['restaurant, park, bar, night_club, clothing_store, cafe, hotel, hot_spring'],
      keyword: keywordInput,
      language: 'ja'
    },
    displayResults
  );

}

/*
 周辺検索の結果表示
 ※nearbySearchのコールバック関数
  results : 検索結果
  status ： 実行結果ステータス
  pagination : ページネーション
*/
function displayResults(results, status, pagination) {

  if(status == google.maps.places.PlacesServiceStatus.OK) {

    //検索結果をplacesList配列に連結
    placesList = placesList.concat(results);

    //pagination.hasNextPage==trueの場合、
    //続きの検索結果あり
    if (pagination.hasNextPage) {

      //pagination.nextPageで次の検索結果を表示する
      //※連続実行すると取得に失敗するので、
      //  1秒くらい間隔をおく
      setTimeout(pagination.nextPage(), 1000);

    //pagination.hasNextPage==falseになったら
    //全ての情報が取得できているので、
    //結果を表示する
    } else {

      //ソートを正しく行うため、
      //ratingが設定されていないものを
      //一旦「-1」に変更する。
      // for (var i = 0; i < placesList.length; i++) {
      //   if(placesList[i].rating == undefined){
      //     placesList[i].rating = -1;
      //   }
      // }

      // //ratingの降順でソート（連想配列ソート）
      // placesList.sort(function(a,b){
      //   if(a.rating > b.rating) return -1;
      //   if(a.rating < b.rating) return 1;
      //   return 0;
      // });

      //placesList配列をループして、
      //結果表示のHTMLタグを組み立てる
      var resultHTML = "<ol>";

      for (var i = 0; i < placesList.length; i++) {
        place = placesList[i];

        //ratingが-1のものは「---」に表示変更
        var rating = place.rating;
        if(rating == -1) rating = "---";

        //表示内容（評価＋名称）
        var content = "【" + rating + "】 " + place.name;

        //クリック時にMapにマーカー表示するようにAタグを作成
        resultHTML += "<li>";
        resultHTML += "<a href=\"javascript: void(0);\"";
        resultHTML += " onclick=\"createMarker(";
        resultHTML += "'" + place.name + "',";
        resultHTML += "'" + place.vicinity + "',";
        resultHTML += "'" + place.rating + "',";
        resultHTML += "'" + place.place_id + "',";
        resultHTML += place.geometry.location.lat() + ",";
        resultHTML += place.geometry.location.lng() + ")\">";
        resultHTML += content;
        resultHTML += "</a>";
        resultHTML += "</li>";
      }

      resultHTML += "</ol>";

      //結果表示
      document.getElementById("results").innerHTML = resultHTML;
    }

  } else {
    //エラー表示
    var results = document.getElementById("results");
    if(status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
      results.innerHTML = "検索結果が0件です。";
    } else if(status == google.maps.places.PlacesServiceStatus.ERROR) {
      results.innerHTML = "サーバ接続に失敗しました。";
    } else if(status == google.maps.places.PlacesServiceStatus.INVALID_REQUEST) {
      results.innerHTML = "リクエストが無効でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT) {
      results.innerHTML = "リクエストの利用制限回数を超えました。";
    } else if(status == google.maps.places.PlacesServiceStatus.REQUEST_DENIED) {
      results.innerHTML = "サービスが使えない状態でした。";
    } else if(status == google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR) {
      results.innerHTML = "原因不明のエラーが発生しました。";
    }

  }
}

/*
 マーカー表示
  name : 名称
  vicinity : 近辺住所
  lat : 緯度
  lng : 経度
*/
function createMarker(name, vicinity, rating, place_id, lat, lng){

  //マーカー表示する位置のMap表示
  var map = new google.maps.Map(document.getElementById("map"), {
    zoom: 15,
    center: new google.maps.LatLng(lat, lng),
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  //マーカー表示
  var marker = new google.maps.Marker({
    map: map,
    position: new google.maps.LatLng(lat, lng)
  });


  //情報窓の設定
  var info = "<div style=\"min-width: 100px\">";
  info += name + "<br />";
  info += vicinity + "<br />";
  // info += "<a href=\"https://maps.google.co.jp/maps?q=" + encodeURIComponent(name + " " + vicinity) + "&z=15&iwloc=A\"";
  // info += " target=\"_blank\">⇒詳細表示</a><br />";
  // info += "<a href=\"https://www.google.com/maps/dir/?api=1&destination=" + lat + "," + lng + "\"";
  // info += " target=\"_blank\">⇒ここへ行く</a><br />";
  info += "<a href=\"<%= new_map_path %>/?place_name=" + name + "&address=" + vicinity + "&rating=" + rating + "&place_id=" + place_id + "&latitude="  + lat + "&longitude=" + lng + "\"";
  info += " target=\"_self\">⇒お気に入りに登録する</a>";
  info += "</div>";




  //情報窓の表示
  var infoWindow = new google.maps.InfoWindow({
    content: info
  });
  infoWindow.open(map, marker);

  //マーカーのクリック時にも情報窓を表示する
  marker.addListener("click", function(){
    infoWindow.open(map, marker);
  });
}

function getFavoriteAddresss(latitude, longitude, id, place_name) {
  function successCallback(position) {
      let marker = [];
      let infoWindow = [];
      const latlng = new google.maps.LatLng(latitude, longitude);
      let map = new google.maps.Map(document.getElementById('map'), {
          center: latlng,
          zoom: 15,
      });

      marker[0] = new google.maps.Marker({
          map: map,
          position: latlng,
      })

      infoWindow[0] = new google.maps.InfoWindow({
          // contentで中身を指定
          // 今回は文字にリンクを貼り付けた形で表示
          content: `<a href='/maps/${id}'>${place_name}</a>`
          });
          // markerがクリックされた時、
      marker[0].addListener("click", function(){
        console.log('test')
          // infoWindowを表示
          infoWindow[0].open(map, marker[0]);
      });
  }

  function errorCallback() {
      const result = document.getElementById('result');
      result.innerHTML = '座標取得できませんでした'
  }
  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);

}

function codeAddress(){
  let inputAddress = document.getElementById('address').value;
  geocoder = new google.maps.Geocoder()
  geocoder.geocode( { 'address': inputAddress},

  function(results, status) {
    if (status == 'OK') {
      map.setCenter(results[0].geometry.location);

    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  });
}

// function getCurrentAddress() {
//   function successCallback(position) {
//       let marker = [];
//       let infoWindow = [];
//       let latlngFav;
//       const maps = gon.maps;
//       const latitude = position.coords.latitude;
//       const longitude = position.coords.longitude;

//       const latlng = new google.maps.LatLng(latitude, longitude);
//       let map = new google.maps.Map(document.getElementById('map'), {
//           center: latlng,
//           zoom: 15,
//       });

//       for (let i = 0; i < maps.length; i++) {
//         latlngFav = new google.maps.LatLng(maps[i].latitude, maps[i].longitude);
//         marker[i] = new google.maps.Marker({
//                 map: map,
//                 position: latlngFav,
//           });

//           infoWindow[i] = new google.maps.InfoWindow({
//                     // contentで中身を指定
//                     // 今回は文字にリンクを貼り付けた形で表示
//                     content: `<a href='/maps/${maps[i].id}'>${maps[i].place_name}</a>`
//                     });
//                     // markerがクリックされた時、
//                     marker[i].addListener("click", function(){
//                         // infoWindowを表示
//                         infoWindow[i].open(map, marker[i]);
//                     });
//       }
//   }
//   function errorCallback() {
//       const result = document.getElementById('result');
//       result.innerHTML = '座標取得できませんでした'
//   }
//   navigator.geolocation.getCurrentPosition(successCallback, errorCallback);
// }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap&libraries=places" async defer></script>

  </div>
</body>

